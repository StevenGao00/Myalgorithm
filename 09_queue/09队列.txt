09 队列
（1）队列:先进先出。基本操作:入队enqueue(),出队dequeue()。
   队列是一种操作受限的线性表数据结构。
   两种存储方式：顺序队列，链式队列。
   需要 head tail 指针，顺序存储时候需要数据搬移（list[i-head] = list[i]）。

（2）循环队列
   为了解决顺序队列tail==n时的数据搬移工作。
   注意空队列和满队列判定条件。
   顺序队列：tail==n队列满。head==tail队列空。
   循环队列：(tail+1)%n=head。tail指向的实际位置是没有数据存储的，所以循环队列会浪费一盒数据的存储空间。
   阻塞队列：队空时队头取数会被阻塞，队满时队尾插入会被阻塞。
   并发队列：多线程操作队列时，存在线程安全问题，线程安全队列叫做并发队列。最简单的方式是直接在enqueue()和dequeue()
            上面加线程锁，同一时刻只允许一个存或取操作。基于数组的循环队列，利用CAS原子操作，可以实现高效的并发队列。
（3）队列在线程池等有限资源池中的应用
    线程池没有空闲线程时候，新任务请求线程资源时，线程池如何处理？
    （a）非用塞处理，直接拒绝。
    （b）阻塞处理，将请求排队。
        1）基于链表实现，支持无限排队的的无界队列，但是可能导致过多的请求排队。不使用于时间敏感系统。
        2）基于数组实现的有界队列，大小有限，排队请求大于队列大小时，接下来的请求会被拒绝。（注意队列的大小设置）
    （c）实现无锁并发队列，可以使用cas+数组实现。使用CAS实现无锁队列，在入队列之前获取tail位置，入队时比较tail是否发生变化
        如果否，则允许入队，反之则入队失败，出队则是获取head位置，进行cas。
（4）队列排队请求应用
    （a）线程池
    （b）分布式应用中的消息队列，kafka。
