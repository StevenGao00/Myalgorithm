缓存淘汰策略：
    1、FIFO(First in First out)先进先出策略
    2、LEU(Least Frequently used)最少使用策略
    3、LRU(Least Recently used) 最近最少使用策略
链表：
    单链表、双向链表、循环链表、双向循环链表

链表的特点：
    1、比数组占内存。每一个结点都有数据域和指针域，因此链表比数组更占用内存，如果代码对内存的使用非常苛刻，
    那数组会比链表适合。对链表的频繁的插入和删除操作，还会导致频繁的内存的申请和释放，容
    易造成内存碎片。
    2、与数组相比，链表更适合插入和删除操作频繁的场景，查询的复杂度较高。

用链表实现LRU缓存淘汰机制：
    可定义有序单链表，越靠近尾部是越早之前访问的。当有新数据被访问时，先遍历单链表：
    1、如数据已经被缓存在单链表中，则从其原来的位置删除，从头部将数据插入单链表。
    2、如果数据没有在缓存链表中：
        a、如果缓存未满、将此节点直接插入链表头部。
        b、如果缓存已满，先将尾部节点删除，再讲此节点插入表头。

    注意：遍历链表时间复杂度为O(n)，可以使用散列表来记录每个数据存储的位置，优化为O(1)。
