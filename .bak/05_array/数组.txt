数组
线性表：数组、链表、栈、队列
非线性表：二叉树、堆、图

数组的特点：
     1、数组使用一块连续的内存空间，来存储同一类型的数据，一经声明，大小固定
     2、支持随机访问，时间复杂度为O(1)，但是查找复杂度最快(二分查找)为：O(logn)
     3、存在数组越界,可能会造成无限循环
     4、连续的内存空间，存储相同类型的数据，所以支持随机访问
        为了保持数组的连续性，插入删除时就要做大量的数据搬移工作，操作时间复杂度为O(n)
数组下标计算：
     一维：
        a[k] = base_adrress + k * type_size
        数组下标从0开始，如果从1开始，上式第二项变为 (k-1) *  type_size，计算机每次计算地址将多计算一次减法操作。
     二维：(m * n)，a[i][j](i<m, j<n)的地址：
        addre = base_address  + (i*n + j) * type_size


注：
    关于python class 的访问控制：
        1、单下划线：_
            来实现模块级别的私有化，变量除外。一般约定一单下划线开头的函数是私有的。
            例如，在一个模块中有单下划线开头的变量_a和以但下划线开头的函数_func，当
            外部调用该模块时，但下划线变量可以被调用，但是单下滑线函数不可以被调用。
        2、双下划线：__
            a:对于python中的class属性，可以通过双下划线来实现一定程度的私有化。因为双下划线
                开头的属性在运行时容易被混淆(manging)。
                通过内建函数dir()可以看class的所有有效属性。双下划线开头的属性名被改为：_classname__propertyname
                所以即使使用双下划线，也没有实现属性私有化，_classname__propertyname 可以直接访问该属性。
            b:双下划线可以避免子类对父类同名属性的冲突。
        总结：
            a:"_“和” __"的使用更多的是一种规范/约定，并没有真正达到限制的目的：
            b:“_”：以单下划线开头的表示的是protected类型的变量，即只能允许其本身与子类进行访问；同时表示弱内部变量标示，如，当使用"from moduleNmae import *"时，不会将以一个下划线开头的对象引入。
            c:“__”：双下划线的表示的是私有类型的变量。只能是允许这个类本身进行访问了，连子类也不可以，这类属性在运行时属性名会加上单下划线和类名。

    关于python class __getitem__()：
        1、如果在类中定义了__getitem__()方法，那么他的实例对象（假设为P）就可以这样P[key]取值。当实例对象做P[key]运算时，就会调用类中的__getitem__()方法，为实例添加[]运算符支持。
            “__getattribute__”与“_getitem_”的最大差异，示例如下：
            a. “__getattribute__”只适用于所有的“.”运算符。
            b. “__getitem__”只适用于所有的“[]”运算符。
        2、super() 函数是用于调用父类(超类)的一个方法。
           super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。
           MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。
           super(type[, object-or-type])   type  类，object-or-type 类，一般是 self
        3、避免语法错误错误__getattr__，调用不存在的属性也不会报错。
            那“_ getattribute_”与“_ getattr_”的最大差异在于：
            a. 无论调用对象的什么属性，包括不存在的属性，都会首先调用“_ getattribute_”方法；
            b. 只有找不到对象的属性时，才会调用“_ getattr_”方法；
