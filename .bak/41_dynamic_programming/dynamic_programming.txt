动态规划
什么样的问题适合用动态规划解？
    一个模型三个特征
一个模型：
    一个模型是动态规划合适解决问题的模型：解决问题的过程经理多个决策阶段，每个阶段都对应一组状态。
    然后我们寻找一组决策序列，经过这组决策序列，能够产生最终期望求解的最优值。
    该模型定义为:多阶段解决最优解模型
三个特征：最优子结构、无后效性、重复子问题
    1、最优子结构
    最优子结构指的是，问题的最优解包含子问题的最优解。反过来说就是，我们可以通过子问题的最优解，推导出问题的最优解。
    如果我们把最优子结构，对应到我们前面定义的动态规划问题模型上，那我们也可以理解为，
    后面阶段的状态可以通过前面阶段的状态推导出来。
    2、无后效性
    无后效性有两层含义，第一层含义是，在推导后面阶段的状态的时候，我们只关心前面阶段的状态值，不关心这个状态是怎么一步一步推
    推导出来的。第二层含义是，某阶段状态一旦确定，就不受之后阶段的决策影响。无后效性是一个非常“宽松”的要求。
    只要满足前面提到的动态规划问题模型，其实基本上都会满足无后效性。
    3、重复子问题
    不同的决策序列，到达某种相同的阶段时，可能会产生重复的状态。

两种动态规划解题思路
1、状态转移表法
    一般能用动态规划解决的问题都可以使用回溯法暴力搜索解决。所以当拿到问题时候可以先使用回溯法解决，
    然后定义状态，每一个状态表示一个节点，然后画出递归树。从递归树中可以很容易看出来是都存在重复子问题。
    以及重复子问题时如何产生的，然后看是否可以使用动态规划解决。
    对于重复子问题：
        a: 回溯+备忘录，效率与动态规划解决办法基本相同。
        b: 状态转移表法，动态规划。
    实现步骤：回溯法实现 -> 定义状态 -> 画递归树 -> 找重复子问题 -> 画出状态转移表
                -> 根据递归关系填表 -> 将填表过程翻译成代码。
2、状态方程法
    状态转移法有点类似于递归的解题思路。需要分析某一个问题如何通过子问题来递归求解，也就是所谓的最优子结构。
    根据最优子结构，写出递归公式，也就是所谓的状态方程。状态方程时解决动态规划问题的关键。
    两种实现方法：
        a: 递归+备忘录
        b: 迭代递推
    实现步骤：找最优子结构 -> 写状态转移方程 -> 将状态转移方程翻译成代码

四种算法思想：贪心、分治、回溯、动态规划
    贪心、回溯、动态规划可以归为一类，因为在解决问题时候都可以抽象成多阶段决策最优解模型。
    分治法上虽然大部分也可以是最优解问题，但是大部分都不能抽象成多阶段决策模型。

    回溯法，基本上能用动态规划、贪心解决的问题都可以使用回溯发解决。回溯法相当于穷举搜索。适合解决小规模问题。
    动态规划解决问题需要满足一个模型三个特征：多阶段决策模型；最优子结构、无后效性和重复子问题。
        在重复子问题上动态规划与分治法区分非常明显。分治法要求分割成的子问题不能有重复子问题，而动态规划
        之所以高效就是因为回溯算法实现中有大量的重复子问题。
    贪心算法实际上是动态规划的一种特殊情况。需要三个条件：最优子结构、无后效性、贪心选择性。
        其中贪心选择性是通过局部最优的选择能产生全局最优选择，每一个阶段我们都选择当前看起来的最优的决策，所有的
        阶段决策完之后最终的局部最优解构成全局最优解。


